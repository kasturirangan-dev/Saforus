export interface LanguageOption {
  title: string;
  short: string;
  value: string;
}

export interface CustomMediaQueryList {
  name: string;
  query: MediaQueryList;
}
export interface ASTNode {
  type: string;
  data?: any;
  children?: ASTNode[]; // Directly specify ASTNode[] for children
  value?: string;
  depth?: number;
  url?: string;
  lang?: string;
  title?: string | null | undefined; // Allow title to be null
  Root?: React.ReactNode;
}

export interface AppState {
  mqls: CustomMediaQueryList[];
  queryMatches: { [key: string]: boolean };
  language: LanguageOption;
  columnMode: number;
  activeSection: string;
  showNav: boolean;
  ast: ASTNode;
}

export interface RoundedToggleOptionType {
  title: string;
  value: string;
  short: string;
}

export interface Chunk {
  left: ASTNode[];
  right: ASTNode[];
  title?: string;
    preview: boolean;
    slug: string;
}

export interface ContentProps {
  ast: {
    children: ASTNode[];
  };
  language: RoundedToggleOptionType;
  leftClassname: string;
  rightClassname: string;
}

export interface NavigationItemProps {
  sectionName: string;
  active: boolean;
  onClick: (sectionName: string) => void;
  href: string;
}

 // Define the type for the AST generated by remark
export interface RemarkNode {
  type: string;
  children?: RemarkNode[];
  value?: string;
  depth?: number;
  url?: string;
  title?: string;
  alt?: string;
  lang?: string;
  meta?: string;
  data?: {
    id: string;
    hProperties?: any;
    hChildren?: RemarkNode[];
    position?: {
      start: { line: number; column: number; offset?: number };
      end: { line: number; column: number; offset?: number };
    };
  };
}

export interface Heading {
    type: string;
  depth: number;
  children: { value: string }[];
    data?: { id: string };
}

export interface NavigationProps {
  ast: {
    children: Heading[];
  };
  activeSection?: string;
  navigationItemClicked: (sectionName: string) => void;
}

export interface RoundedToggleProps {
  options: RoundedToggleOptionType[];
  active: RoundedToggleOptionType;
  short?: boolean;
  onChange: (option: RoundedToggleOptionType) => void;
}

export interface RoundedToggleOptionProps {
  option: RoundedToggleOptionType;
  className: string;
  short?: boolean;
  onClick: (option: RoundedToggleOptionType) => void;
}

export interface SectionProps {
  chunk: Chunk;
  leftClassname: string;
  rightClassname: string;
}

export interface CodeNode extends Node {
  lang?: string;
  value: string;
  type: string;
}
