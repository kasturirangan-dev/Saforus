name: 'CI/CD - Template'

on:
  workflow_call:
    inputs:
      AWS_ACCOUNT_ID:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
      DEPLOYMENT_ENV:
        required: true
        type: string
      TARGET_APP:
        required: true
        type: string
      CPU_SIZE:
        required: true
        type: string
      MEMORY_SIZE:
        required: true
        type: string
      SVC_PORT:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.DEPLOYMENT_ENV }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare macro variables
        run: |
          TASK_DEFINITION=./aws-ecs-task-definitions/task-definition.json
          sed -i "s|<<DEPLOYMENT_ENV>>|${{ inputs.DEPLOYMENT_ENV }}|g" $TASK_DEFINITION
          sed -i "s|<<CPU_SIZE>>|${{ inputs.CPU_SIZE }}|g" $TASK_DEFINITION
          sed -i "s|<<MEMORY_SIZE>>|${{ inputs.MEMORY_SIZE }}|g" $TASK_DEFINITION
          sed -i "s|<<SVC_PORT>>|${{ inputs.SVC_PORT }}|g" $TASK_DEFINITION
          sed -i "s|<<AWS_ACCOUNT_ID>>|${{ inputs.AWS_ACCOUNT_ID }}|g" $TASK_DEFINITION
          sed -i "s|<<TARGET_APP>>|${{ inputs.TARGET_APP }}|g" $TASK_DEFINITION

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image & Push to Amazon ECR
        id: build-image
        run: |
          FULL_IMAGE_TAG=${{ steps.login-ecr.outputs.registry }}/${{ inputs.TARGET_APP }}:${{ inputs.DEPLOYMENT_ENV }}-${{ github.sha }}
          docker build --build-arg WEB_ENV=${{ inputs.DEPLOYMENT_ENV }} --build-arg APP_NAME=${{ inputs.TARGET_APP }} --build-arg PORT=${{ inputs.SVC_PORT }} -t $FULL_IMAGE_TAG .
          docker push $FULL_IMAGE_TAG
          echo "image=$FULL_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update AWS ECS Service With New Docker Image Name
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./aws-ecs-task-definitions/task-definition.json
          container-name: ${{ inputs.TARGET_APP }}-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Update AWS ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.TARGET_APP }}-service
          cluster: ${{ inputs.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Send Notification to Slack
        uses: 8398a7/action-slack@v3.16.2
        with:
          status: ${{ job.status }}
          fields: repo,pullRequest,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
